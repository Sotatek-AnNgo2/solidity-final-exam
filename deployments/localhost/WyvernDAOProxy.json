{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        },
        {
          "name": "token",
          "type": "address"
        },
        {
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "receiveApproval",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "dest",
          "type": "address"
        },
        {
          "name": "calldata",
          "type": "bytes"
        }
      ],
      "name": "delegateProxyAssert",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "dest",
          "type": "address"
        },
        {
          "name": "calldata",
          "type": "bytes"
        }
      ],
      "name": "delegateProxy",
      "outputs": [
        {
          "name": "result",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipRenounced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReceivedEther",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "ReceivedTokens",
      "type": "event"
    }
  ],
  "transactionHash": "0x3493a0ea67bb125b2a58b0b7949ced8e970568af3ea551429bde5a547533a916",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "391055",
    "logsBloom": "0x
    "blockHash": "0x0272b38ee47711ccc391b0e7e377ad1516d111b7833765ace055cf5c17b05a11",
    "transactionHash": "0x3493a0ea67bb125b2a58b0b7949ced8e970568af3ea551429bde5a547533a916",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "391055",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e71906c59142764c7a12ed306d380657",
  "metadata": "{\"compiler\":{\"version\":\"0.4.26+commit.4563c3fc\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"calldata\",\"type\":\"bytes\"}],\"name\":\"delegateProxyAssert\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"calldata\",\"type\":\"bytes\"}],\"name\":\"delegateProxy\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ReceivedTokens\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"delegateProxy(address,bytes)\":{\"details\":\"Owner only\\r\",\"params\":{\"calldata\":\"Calldata to send\\r\",\"dest\":\"Address to which the call will be sent\\r\"},\"return\":\"Result of the delegatecall (success or failure)\\r\"},\"delegateProxyAssert(address,bytes)\":{\"details\":\"Same functionality as `delegateProxy`, just asserts the return value\\r\",\"params\":{\"calldata\":\"Calldata to send\\r\",\"dest\":\"Address to which the call will be sent\\r\"}},\"receiveApproval(address,uint256,address,bytes)\":{\"details\":\"Receive tokens and generate a log event\\r\",\"params\":{\"extraData\":\"Additional data to log\\r\",\"from\":\"Address from which to transfer tokens\\r\",\"token\":\"Address of token\\r\",\"value\":\"Amount of tokens to transfer\\r\"}},\"renounceOwnership()\":{\"details\":\"Allows the current owner to relinquish control of the contract.\\r\"},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\\r\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\\r\"}}}},\"userdoc\":{\"methods\":{\"delegateProxy(address,bytes)\":{\"notice\":\"Execute a DELEGATECALL from the proxy contract\\r \"},\"delegateProxyAssert(address,bytes)\":{\"notice\":\"Execute a DELEGATECALL and assert success\\r \"}}}},\"settings\":{\"compilationTarget\":{\"contracts/WyvernDAOProxy.sol\":\"WyvernDAOProxy\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/WyvernDAOProxy.sol\":{\"content\":\"pragma solidity ^0.4.13;\\n\\nimport { DelegateProxy } from \\\"./dao/DelegateProxy.sol\\\";\\n\\ncontract WyvernDAOProxy is DelegateProxy {\\n\\n    constructor()\\n        public\\n    {\\n        owner = msg.sender;\\n    }\\n\\n}\",\"keccak256\":\"0x4a54b16baa81e004b5a648c2b7c37e82f48d8f6918239344f160d8b6dc6a2a15\"},\"contracts/dao/DelegateProxy.sol\":{\"content\":\"pragma solidity ^0.4.13;\\r\\n\\r\\nimport { Ownable } from \\\"../libraries/Ownable.sol\\\";\\r\\nimport { TokenRecipient } from \\\"../libraries/TokenRecipient.sol\\\";\\r\\n\\r\\ncontract DelegateProxy is TokenRecipient, Ownable {\\r\\n\\r\\n    /**\\r\\n     * Execute a DELEGATECALL from the proxy contract\\r\\n     *\\r\\n     * @dev Owner only\\r\\n     * @param dest Address to which the call will be sent\\r\\n     * @param calldata Calldata to send\\r\\n     * @return Result of the delegatecall (success or failure)\\r\\n     */\\r\\n    function delegateProxy(address dest, bytes calldata)\\r\\n        public\\r\\n        onlyOwner\\r\\n        returns (bool result)\\r\\n    {\\r\\n        return dest.delegatecall(calldata);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Execute a DELEGATECALL and assert success\\r\\n     *\\r\\n     * @dev Same functionality as `delegateProxy`, just asserts the return value\\r\\n     * @param dest Address to which the call will be sent\\r\\n     * @param calldata Calldata to send\\r\\n     */\\r\\n    function delegateProxyAssert(address dest, bytes calldata)\\r\\n        public\\r\\n    {\\r\\n        require(delegateProxy(dest, calldata));\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xb0426312614e0cd69381c055d1b62684dc3b7cc26f661baf06ebe8529d8d0c7a\"},\"contracts/libraries/ERC20.sol\":{\"content\":\"pragma solidity ^0.4.13;\\n\\nimport { SafeMath } from \\\"../libraries/SafeMath.sol\\\";\\n\\ncontract ERC20Basic {\\n  uint256 public totalSupply;\\n  function balanceOf(address who) public view returns (uint256);\\n  function transfer(address to, uint256 value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) balances;\\n\\n  /**\\n  * @dev transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n    require(_to != address(0));\\n    require(_value <= balances[msg.sender]);\\n\\n    // SafeMath.sub will throw if there is not enough balance.\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    emit Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view returns (uint256 balance) {\\n    return balances[_owner];\\n  }\\n\\n}\\n\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public view returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\\n  function approve(address spender, uint256 value) public returns (bool);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ncontract StandardToken is ERC20, BasicToken {\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\\n    require(_to != address(0));\\n    require(_value <= balances[_from]);\\n    require(_value <= allowed[_from][msg.sender]);\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   *\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(address _owner, address _spender) public view returns (uint256) {\\n    return allowed[_owner][_spender];\\n  }\\n\\n  /**\\n   * approve should be called when allowed[_spender] == 0. To increment\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   */\\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\\n    uint oldValue = allowed[msg.sender][_spender];\\n    if (_subtractedValue > oldValue) {\\n      allowed[msg.sender][_spender] = 0;\\n    } else {\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n    }\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n}\",\"keccak256\":\"0x33bc8fd517720cd03826840e07318dd32c6386bb9097fc78691ec126a2a0817e\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"pragma solidity 0.4.26;\\r\\n\\r\\ncontract Ownable {\\r\\n  address public owner;\\r\\n\\r\\n\\r\\n  event OwnershipRenounced(address indexed previousOwner);\\r\\n  event OwnershipTransferred(\\r\\n    address indexed previousOwner,\\r\\n    address indexed newOwner\\r\\n  );\\r\\n\\r\\n\\r\\n  /**\\r\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\\n   * account.\\r\\n   */\\r\\n  constructor() public {\\r\\n    owner = msg.sender;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if called by any account other than the owner.\\r\\n   */\\r\\n  modifier onlyOwner() {\\r\\n    require(msg.sender == owner);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n   * @param newOwner The address to transfer ownership to.\\r\\n   */\\r\\n  function transferOwnership(address newOwner) public onlyOwner {\\r\\n    require(newOwner != address(0));\\r\\n    emit OwnershipTransferred(owner, newOwner);\\r\\n    owner = newOwner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Allows the current owner to relinquish control of the contract.\\r\\n   */\\r\\n  function renounceOwnership() public onlyOwner {\\r\\n    emit OwnershipRenounced(owner);\\r\\n    owner = address(0);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x8be1863b3ecd995f35ec012b1b63dcedeecdd340006b27689338b8121a7bbb84\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"pragma solidity 0.4.26;\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n  /**\\r\\n  * @dev Multiplies two numbers, throws on overflow.\\r\\n  */\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    c = a * b;\\r\\n    assert(c / a == b);\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Integer division of two numbers, truncating the quotient.\\r\\n  */\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\\r\\n    // uint256 c = a / b;\\r\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n    return a / b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\r\\n  */\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    assert(b <= a);\\r\\n    return a - b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Adds two numbers, throws on overflow.\\r\\n  */\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n    c = a + b;\\r\\n    assert(c >= a);\\r\\n    return c;\\r\\n  }\\r\\n}\",\"keccak256\":\"0xedb0e1081827d01b6928b4685641e765662e24960b4c8999de7fad7668ba3a82\"},\"contracts/libraries/TokenRecipient.sol\":{\"content\":\"pragma solidity 0.4.26;\\r\\n\\r\\nimport { ERC20 } from \\\"./ERC20.sol\\\";\\r\\n\\r\\ncontract TokenRecipient {\\r\\n    event ReceivedEther(address indexed sender, uint amount);\\r\\n    event ReceivedTokens(address indexed from, uint256 value, address indexed token, bytes extraData);\\r\\n\\r\\n    /**\\r\\n     * @dev Receive tokens and generate a log event\\r\\n     * @param from Address from which to transfer tokens\\r\\n     * @param value Amount of tokens to transfer\\r\\n     * @param token Address of token\\r\\n     * @param extraData Additional data to log\\r\\n     */\\r\\n    function receiveApproval(address from, uint256 value, address token, bytes extraData) public {\\r\\n        ERC20 t = ERC20(token);\\r\\n        require(t.transferFrom(from, this, value));\\r\\n        emit ReceivedTokens(from, value, token, extraData);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Receive Ether and generate a log event\\r\\n     */\\r\\n    function () payable public {\\r\\n        emit ReceivedEther(msg.sender, msg.value);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3f021ffc27e0f9d1b8e8f8bd0274719a7a3d48428a73076426f6a9ad771d5480\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060008054600160a060020a0319908116339081179091161790556105b68061003a6000396000f3006080604052600436106100775763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663715018a681146100af5780638da5cb5b146100c65780638f4ffcb1146100f7578063a018f2b214610167578063f2fde38b146101ce578063fc74dadd146101ef575b60408051348152905133917fa419615bc8fda4c87663805ee2a3597a6d71c1d476911d9892f340d965bc7bf1919081900360200190a2005b3480156100bb57600080fd5b506100c461026a565b005b3480156100d257600080fd5b506100db6102d6565b60408051600160a060020a039092168252519081900360200190f35b34801561010357600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526100c494600160a060020a038135811695602480359660443590931695369560849492019181908401838280828437509497506102e59650505050505050565b34801561017357600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526100c4958335600160a060020a031695369560449491939091019190819084018382808284375094975061044a9650505050505050565b3480156101da57600080fd5b506100c4600160a060020a0360043516610463565b3480156101fb57600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610256958335600160a060020a03169536956044949193909101919081908401838280828437509497506104f79650505050505050565b604080519115158252519081900360200190f35b600054600160a060020a0316331461028157600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031681565b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015230602483015260448201869052915184928316916323b872dd9160648083019260209291908290030181600087803b15801561035757600080fd5b505af115801561036b573d6000803e3d6000fd5b505050506040513d602081101561038157600080fd5b5051151561038e57600080fd5b82600160a060020a031685600160a060020a03167fd65b48fd35864b3528d38e44760be5553248f89bf3ff6b06cca57817cc2650bf86856040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156104085781810151838201526020016103f0565b50505050905090810190601f1680156104355780820380516001836020036101000a031916815260200191505b50935050505060405180910390a35050505050565b61045482826104f7565b151561045f57600080fd5b5050565b600054600160a060020a0316331461047a57600080fd5b600160a060020a038116151561048f57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008054600160a060020a0316331461050f57600080fd5b82600160a060020a03168260405180828051906020019080838360005b8381101561054457818101518382015260200161052c565b50505050905090810190601f1680156105715780820380516001836020036101000a031916815260200191505b50915050600060405180830381855af4959450505050505600a165627a7a723058203a04d703260b12a2e14e7f693144c4049f61990fa7222e088c6502df056ce6640029",
  "deployedBytecode": "0x6080604052600436106100775763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663715018a681146100af5780638da5cb5b146100c65780638f4ffcb1146100f7578063a018f2b214610167578063f2fde38b146101ce578063fc74dadd146101ef575b60408051348152905133917fa419615bc8fda4c87663805ee2a3597a6d71c1d476911d9892f340d965bc7bf1919081900360200190a2005b3480156100bb57600080fd5b506100c461026a565b005b3480156100d257600080fd5b506100db6102d6565b60408051600160a060020a039092168252519081900360200190f35b34801561010357600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526100c494600160a060020a038135811695602480359660443590931695369560849492019181908401838280828437509497506102e59650505050505050565b34801561017357600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526100c4958335600160a060020a031695369560449491939091019190819084018382808284375094975061044a9650505050505050565b3480156101da57600080fd5b506100c4600160a060020a0360043516610463565b3480156101fb57600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610256958335600160a060020a03169536956044949193909101919081908401838280828437509497506104f79650505050505050565b604080519115158252519081900360200190f35b600054600160a060020a0316331461028157600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031681565b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015230602483015260448201869052915184928316916323b872dd9160648083019260209291908290030181600087803b15801561035757600080fd5b505af115801561036b573d6000803e3d6000fd5b505050506040513d602081101561038157600080fd5b5051151561038e57600080fd5b82600160a060020a031685600160a060020a03167fd65b48fd35864b3528d38e44760be5553248f89bf3ff6b06cca57817cc2650bf86856040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156104085781810151838201526020016103f0565b50505050905090810190601f1680156104355780820380516001836020036101000a031916815260200191505b50935050505060405180910390a35050505050565b61045482826104f7565b151561045f57600080fd5b5050565b600054600160a060020a0316331461047a57600080fd5b600160a060020a038116151561048f57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008054600160a060020a0316331461050f57600080fd5b82600160a060020a03168260405180828051906020019080838360005b8381101561054457818101518382015260200161052c565b50505050905090810190601f1680156105715780820380516001836020036101000a031916815260200191505b50915050600060405180830381855af4959450505050505600a165627a7a723058203a04d703260b12a2e14e7f693144c4049f61990fa7222e088c6502df056ce6640029",
  "devdoc": {
    "methods": {
      "delegateProxy(address,bytes)": {
        "details": "Owner only\r",
        "params": {
          "calldata": "Calldata to send\r",
          "dest": "Address to which the call will be sent\r"
        },
        "return": "Result of the delegatecall (success or failure)\r"
      },
      "delegateProxyAssert(address,bytes)": {
        "details": "Same functionality as `delegateProxy`, just asserts the return value\r",
        "params": {
          "calldata": "Calldata to send\r",
          "dest": "Address to which the call will be sent\r"
        }
      },
      "receiveApproval(address,uint256,address,bytes)": {
        "details": "Receive tokens and generate a log event\r",
        "params": {
          "extraData": "Additional data to log\r",
          "from": "Address from which to transfer tokens\r",
          "token": "Address of token\r",
          "value": "Amount of tokens to transfer\r"
        }
      },
      "renounceOwnership()": {
        "details": "Allows the current owner to relinquish control of the contract.\r"
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.\r",
        "params": {
          "newOwner": "The address to transfer ownership to.\r"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "delegateProxy(address,bytes)": {
        "notice": "Execute a DELEGATECALL from the proxy contract\r "
      },
      "delegateProxyAssert(address,bytes)": {
        "notice": "Execute a DELEGATECALL and assert success\r "
      }
    }
  }
}