{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        },
        {
          "name": "token",
          "type": "address"
        },
        {
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "receiveApproval",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "dest",
          "type": "address"
        },
        {
          "name": "calldata",
          "type": "bytes"
        }
      ],
      "name": "delegateProxyAssert",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "dest",
          "type": "address"
        },
        {
          "name": "calldata",
          "type": "bytes"
        }
      ],
      "name": "delegateProxy",
      "outputs": [
        {
          "name": "result",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReceivedEther",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "ReceivedTokens",
      "type": "event"
    }
  ],
  "transactionHash": "0xe5b1ad8354a89e94eac7a66c98b9660cabc0f07dafe100a3b9ceb08d75da1379",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "360902",
    "logsBloom": "0x
    "blockHash": "0xf2064ab9211d16b171b07456f744d26c7c12718a0b54f145be5ab86272b5771f",
    "transactionHash": "0xe5b1ad8354a89e94eac7a66c98b9660cabc0f07dafe100a3b9ceb08d75da1379",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "360902",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7688a86ea234391bbaf9dd7910ffed89",
  "metadata": "{\"compiler\":{\"version\":\"0.4.26+commit.4563c3fc\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"calldata\",\"type\":\"bytes\"}],\"name\":\"delegateProxyAssert\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"calldata\",\"type\":\"bytes\"}],\"name\":\"delegateProxy\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ReceivedTokens\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"delegateProxy(address,bytes)\":{\"details\":\"Owner only\",\"params\":{\"calldata\":\"Calldata to send\",\"dest\":\"Address to which the call will be sent\"},\"return\":\"Result of the delegatecall (success or failure)\"},\"delegateProxyAssert(address,bytes)\":{\"details\":\"Same functionality as `delegateProxy`, just asserts the return value\",\"params\":{\"calldata\":\"Calldata to send\",\"dest\":\"Address to which the call will be sent\"}},\"receiveApproval(address,uint256,address,bytes)\":{\"details\":\"Receive tokens and generate a log event\",\"params\":{\"extraData\":\"Additional data to log\",\"from\":\"Address from which to transfer tokens\",\"token\":\"Address of token\",\"value\":\"Amount of tokens to transfer\"}},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}}}},\"userdoc\":{\"methods\":{\"delegateProxy(address,bytes)\":{\"notice\":\"Execute a DELEGATECALL from the proxy contract\"},\"delegateProxyAssert(address,bytes)\":{\"notice\":\"Execute a DELEGATECALL and assert success\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/WyvernDAOProxy.sol\":\"WyvernDAOProxy\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/WyvernDAOProxy.sol\":{\"content\":\"pragma solidity ^0.4.13;\\n\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() public {\\n    owner = msg.sender;\\n  }\\n\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address newOwner) public onlyOwner {\\n    require(newOwner != address(0));\\n    emit OwnershipTransferred(owner, newOwner);\\n    owner = newOwner;\\n  }\\n\\n}\\n\\ncontract ERC20Basic {\\n  uint256 public totalSupply;\\n  function balanceOf(address who) public view returns (uint256);\\n  function transfer(address to, uint256 value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public view returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\\n  function approve(address spender, uint256 value) public returns (bool);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ncontract TokenRecipient {\\n    event ReceivedEther(address indexed sender, uint amount);\\n    event ReceivedTokens(address indexed from, uint256 value, address indexed token, bytes extraData);\\n\\n    /**\\n     * @dev Receive tokens and generate a log event\\n     * @param from Address from which to transfer tokens\\n     * @param value Amount of tokens to transfer\\n     * @param token Address of token\\n     * @param extraData Additional data to log\\n     */\\n    function receiveApproval(address from, uint256 value, address token, bytes extraData) public {\\n        ERC20 t = ERC20(token);\\n        require(t.transferFrom(from, this, value));\\n        emit ReceivedTokens(from, value, token, extraData);\\n    }\\n\\n    /**\\n     * @dev Receive Ether and generate a log event\\n     */\\n    function () payable public {\\n        emit ReceivedEther(msg.sender, msg.value);\\n    }\\n}\\n\\ncontract DelegateProxy is TokenRecipient, Ownable {\\n\\n    /**\\n     * Execute a DELEGATECALL from the proxy contract\\n     *\\n     * @dev Owner only\\n     * @param dest Address to which the call will be sent\\n     * @param calldata Calldata to send\\n     * @return Result of the delegatecall (success or failure)\\n     */\\n    function delegateProxy(address dest, bytes calldata)\\n        public\\n        onlyOwner\\n        returns (bool result)\\n    {\\n        return dest.delegatecall(calldata);\\n    }\\n\\n    /**\\n     * Execute a DELEGATECALL and assert success\\n     *\\n     * @dev Same functionality as `delegateProxy`, just asserts the return value\\n     * @param dest Address to which the call will be sent\\n     * @param calldata Calldata to send\\n     */\\n    function delegateProxyAssert(address dest, bytes calldata)\\n        public\\n    {\\n        require(delegateProxy(dest, calldata));\\n    }\\n\\n}\\n\\ncontract WyvernDAOProxy is DelegateProxy {\\n\\n    constructor()\\n        public\\n    {\\n        owner = msg.sender;\\n    }\\n\\n}\",\"keccak256\":\"0x74a2dbb48d234baf2f52cebe2c77ab943a0f1e350c461a39986e63b0192618bd\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060008054600160a060020a03199081163390811790911617905561052a8061003a6000396000f30060806040526004361061006c5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416638da5cb5b81146100a45780638f4ffcb1146100d5578063a018f2b214610147578063f2fde38b146101ae578063fc74dadd146101cf575b60408051348152905133917fa419615bc8fda4c87663805ee2a3597a6d71c1d476911d9892f340d965bc7bf1919081900360200190a2005b3480156100b057600080fd5b506100b961024a565b60408051600160a060020a039092168252519081900360200190f35b3480156100e157600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261014594600160a060020a038135811695602480359660443590931695369560849492019181908401838280828437509497506102599650505050505050565b005b34801561015357600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610145958335600160a060020a03169536956044949193909101919081908401838280828437509497506103be9650505050505050565b3480156101ba57600080fd5b50610145600160a060020a03600435166103d7565b3480156101db57600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610236958335600160a060020a031695369560449491939091019190819084018382808284375094975061046b9650505050505050565b604080519115158252519081900360200190f35b600054600160a060020a031681565b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015230602483015260448201869052915184928316916323b872dd9160648083019260209291908290030181600087803b1580156102cb57600080fd5b505af11580156102df573d6000803e3d6000fd5b505050506040513d60208110156102f557600080fd5b5051151561030257600080fd5b82600160a060020a031685600160a060020a03167fd65b48fd35864b3528d38e44760be5553248f89bf3ff6b06cca57817cc2650bf86856040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561037c578181015183820152602001610364565b50505050905090810190601f1680156103a95780820380516001836020036101000a031916815260200191505b50935050505060405180910390a35050505050565b6103c8828261046b565b15156103d357600080fd5b5050565b600054600160a060020a031633146103ee57600080fd5b600160a060020a038116151561040357600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008054600160a060020a0316331461048357600080fd5b82600160a060020a03168260405180828051906020019080838360005b838110156104b85781810151838201526020016104a0565b50505050905090810190601f1680156104e55780820380516001836020036101000a031916815260200191505b50915050600060405180830381855af4959450505050505600a165627a7a723058201c20c9c042fb9c9deb8204bf12926dadb619d3ca3a835653fba1cffcddc891cc0029",
  "deployedBytecode": "0x60806040526004361061006c5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416638da5cb5b81146100a45780638f4ffcb1146100d5578063a018f2b214610147578063f2fde38b146101ae578063fc74dadd146101cf575b60408051348152905133917fa419615bc8fda4c87663805ee2a3597a6d71c1d476911d9892f340d965bc7bf1919081900360200190a2005b3480156100b057600080fd5b506100b961024a565b60408051600160a060020a039092168252519081900360200190f35b3480156100e157600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261014594600160a060020a038135811695602480359660443590931695369560849492019181908401838280828437509497506102599650505050505050565b005b34801561015357600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610145958335600160a060020a03169536956044949193909101919081908401838280828437509497506103be9650505050505050565b3480156101ba57600080fd5b50610145600160a060020a03600435166103d7565b3480156101db57600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610236958335600160a060020a031695369560449491939091019190819084018382808284375094975061046b9650505050505050565b604080519115158252519081900360200190f35b600054600160a060020a031681565b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015230602483015260448201869052915184928316916323b872dd9160648083019260209291908290030181600087803b1580156102cb57600080fd5b505af11580156102df573d6000803e3d6000fd5b505050506040513d60208110156102f557600080fd5b5051151561030257600080fd5b82600160a060020a031685600160a060020a03167fd65b48fd35864b3528d38e44760be5553248f89bf3ff6b06cca57817cc2650bf86856040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561037c578181015183820152602001610364565b50505050905090810190601f1680156103a95780820380516001836020036101000a031916815260200191505b50935050505060405180910390a35050505050565b6103c8828261046b565b15156103d357600080fd5b5050565b600054600160a060020a031633146103ee57600080fd5b600160a060020a038116151561040357600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008054600160a060020a0316331461048357600080fd5b82600160a060020a03168260405180828051906020019080838360005b838110156104b85781810151838201526020016104a0565b50505050905090810190601f1680156104e55780820380516001836020036101000a031916815260200191505b50915050600060405180830381855af4959450505050505600a165627a7a723058201c20c9c042fb9c9deb8204bf12926dadb619d3ca3a835653fba1cffcddc891cc0029",
  "devdoc": {
    "methods": {
      "delegateProxy(address,bytes)": {
        "details": "Owner only",
        "params": {
          "calldata": "Calldata to send",
          "dest": "Address to which the call will be sent"
        },
        "return": "Result of the delegatecall (success or failure)"
      },
      "delegateProxyAssert(address,bytes)": {
        "details": "Same functionality as `delegateProxy`, just asserts the return value",
        "params": {
          "calldata": "Calldata to send",
          "dest": "Address to which the call will be sent"
        }
      },
      "receiveApproval(address,uint256,address,bytes)": {
        "details": "Receive tokens and generate a log event",
        "params": {
          "extraData": "Additional data to log",
          "from": "Address from which to transfer tokens",
          "token": "Address of token",
          "value": "Amount of tokens to transfer"
        }
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "delegateProxy(address,bytes)": {
        "notice": "Execute a DELEGATECALL from the proxy contract"
      },
      "delegateProxyAssert(address,bytes)": {
        "notice": "Execute a DELEGATECALL and assert success"
      }
    }
  }
}